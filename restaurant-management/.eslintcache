[{"D:\\Group Project\\Unicorn\\restaurant-management\\src\\index.js":"1","D:\\Group Project\\Unicorn\\restaurant-management\\src\\reportWebVitals.js":"2","D:\\Group Project\\Unicorn\\restaurant-management\\src\\App.js":"3","D:\\Group Project\\Unicorn\\restaurant-management\\src\\store\\index.js":"4","D:\\Group Project\\Unicorn\\restaurant-management\\src\\containers\\DefaultLayout.js":"5","D:\\Group Project\\Unicorn\\restaurant-management\\src\\store\\reducers\\auth.js":"6","D:\\Group Project\\Unicorn\\restaurant-management\\src\\containers\\Footer.js":"7","D:\\Group Project\\Unicorn\\restaurant-management\\src\\containers\\Header.js":"8","D:\\Group Project\\Unicorn\\restaurant-management\\src\\routes.js":"9","D:\\Group Project\\Unicorn\\restaurant-management\\src\\store\\actions.js":"10","D:\\Group Project\\Unicorn\\restaurant-management\\src\\containers\\Welcome.js":"11","D:\\Group Project\\Unicorn\\restaurant-management\\src\\pages\\product-types\\ProductTypeList.js":"12","D:\\Group Project\\Unicorn\\restaurant-management\\src\\pages\\products\\ProductList.js":"13","D:\\Group Project\\Unicorn\\restaurant-management\\src\\controls\\Input.js":"14","D:\\Group Project\\Unicorn\\restaurant-management\\src\\services\\productTypeService.js":"15","D:\\Group Project\\Unicorn\\restaurant-management\\src\\services\\productService.js":"16","D:\\Group Project\\Unicorn\\restaurant-management\\src\\services\\api.js":"17","D:\\Group Project\\Unicorn\\restaurant-management\\src\\pages\\working-sites\\workingSiteList.jsx":"18","D:\\Group Project\\Unicorn\\restaurant-management\\src\\services\\workingSiteService.js":"19"},{"size":1279,"mtime":1609231479930,"results":"20","hashOfConfig":"21"},{"size":375,"mtime":1609135982690,"results":"22","hashOfConfig":"21"},{"size":382,"mtime":1609135982679,"results":"23","hashOfConfig":"21"},{"size":235,"mtime":1609135982694,"results":"24","hashOfConfig":"21"},{"size":826,"mtime":1609135982681,"results":"25","hashOfConfig":"21"},{"size":1062,"mtime":1609135982695,"results":"26","hashOfConfig":"21"},{"size":539,"mtime":1609135982681,"results":"27","hashOfConfig":"21"},{"size":2432,"mtime":1609135982682,"results":"28","hashOfConfig":"21"},{"size":762,"mtime":1609144700143,"results":"29","hashOfConfig":"21"},{"size":118,"mtime":1609135982694,"results":"30","hashOfConfig":"21"},{"size":582,"mtime":1609135982682,"results":"31","hashOfConfig":"21"},{"size":14477,"mtime":1609135982687,"results":"32","hashOfConfig":"21"},{"size":17467,"mtime":1609135982689,"results":"33","hashOfConfig":"21"},{"size":2516,"mtime":1609135982683,"results":"34","hashOfConfig":"21"},{"size":637,"mtime":1609135982693,"results":"35","hashOfConfig":"21"},{"size":1985,"mtime":1609135982692,"results":"36","hashOfConfig":"21"},{"size":492,"mtime":1609145579244,"results":"37","hashOfConfig":"21"},{"size":13928,"mtime":1609232949689,"results":"38","hashOfConfig":"21"},{"size":615,"mtime":1609231444879,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"vsxjod",{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"44"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Group Project\\Unicorn\\restaurant-management\\src\\index.js",["82","83"],"D:\\Group Project\\Unicorn\\restaurant-management\\src\\reportWebVitals.js",[],["84","85"],"D:\\Group Project\\Unicorn\\restaurant-management\\src\\App.js",[],"D:\\Group Project\\Unicorn\\restaurant-management\\src\\store\\index.js",[],"D:\\Group Project\\Unicorn\\restaurant-management\\src\\containers\\DefaultLayout.js",[],"D:\\Group Project\\Unicorn\\restaurant-management\\src\\store\\reducers\\auth.js",[],"D:\\Group Project\\Unicorn\\restaurant-management\\src\\containers\\Footer.js",[],"D:\\Group Project\\Unicorn\\restaurant-management\\src\\containers\\Header.js",[],"D:\\Group Project\\Unicorn\\restaurant-management\\src\\routes.js",[],"D:\\Group Project\\Unicorn\\restaurant-management\\src\\store\\actions.js",[],"D:\\Group Project\\Unicorn\\restaurant-management\\src\\containers\\Welcome.js",[],"D:\\Group Project\\Unicorn\\restaurant-management\\src\\pages\\product-types\\ProductTypeList.js",["86","87","88","89"],"import React, { useState, Fragment, useEffect } from \"react\";\r\nimport Input from \"../../controls/Input\";\r\nimport { Button, FormControl, InputGroup, Modal } from \"react-bootstrap\";\r\nimport productTypeService from \"../../services/productTypeService\";\r\nimport { useFormik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport axios from \"axios\";\r\nimport \"./style.css\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst ProductTypeList = (props) => {\r\n  const [productTypes, setProductTypes] = useState([]);\r\n  const [typesPerPage, setTypesPerPage] = useState(3);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [totalPages, setTotalPages] = useState(0);\r\n  const [totalElements, setTotalElements] = useState(0);\r\n  const [sortDir, setSortDir] = useState(\"asc\");\r\n  const [search, setSearch] = useState(\"\");\r\n\r\n  // Validation\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      name: \"\",\r\n      description: \"\",\r\n    },\r\n    validationSchema: Yup.object({\r\n      name: Yup.string().required(\"Required\"),\r\n      // .min(5, \"Must be 5 characters or more.\"),\r\n    }),\r\n    onSubmit: (values) => {\r\n      console.log(values);\r\n      handleFormSubmit(values);\r\n    },\r\n  });\r\n\r\n  const [modalShow, setModalShow] = useState(false);\r\n\r\n  // get product type ID\r\n  const [detail, setDetail] = useState(false);\r\n  const handleDetailClose = () => setDetail(false);\r\n  const getProductType = (e, dataId) => {\r\n    if (e) {\r\n      e.preventDefault();\r\n    }\r\n    setProductTypeId(dataId);\r\n    if (dataId > 0) {\r\n      // edit\r\n      productTypeService.get(dataId).then((res) => {\r\n        formik.setValues(res);\r\n        setDetail(true);\r\n      });\r\n    }\r\n  };\r\n\r\n  const [id, setId] = useState(1);\r\n  const [productTypeId, setProductTypeId] = useState(0);\r\n\r\n  const handleModalClose = () => setModalShow(false);\r\n  const handleModalShow = (e, dataId) => {\r\n    if (e) {\r\n      e.preventDefault();\r\n    }\r\n    setProductTypeId(dataId);\r\n    if (dataId > 0) {\r\n      // edit\r\n      productTypeService.get(dataId).then((res) => {\r\n        formik.setValues(res);\r\n        setModalShow(true);\r\n      });\r\n    } else {\r\n      // add\r\n      formik.resetForm();\r\n      setModalShow(true);\r\n    }\r\n  };\r\n\r\n  const sortData = () => {\r\n    setTimeout(() => {\r\n      sortDir === \"asc\" ? setSortDir(\"desc\") : setSortDir(\"asc\");\r\n      loadData(currentPage);\r\n    }, 500);\r\n  };\r\n\r\n  const loadData = (currentPage) => {\r\n    // productTypeService.getAll().then((res) => {\r\n    //   setProductTypes(res);\r\n    // });\r\n    currentPage -= 1;\r\n    axios\r\n      .get(\r\n        \"http://localhost:8080/productTypes?pageNumber=\" +\r\n          currentPage +\r\n          \"&pageSize=\" +\r\n          typesPerPage +\r\n          \"&sortBy=name&sortDir=\" +\r\n          sortDir\r\n      )\r\n      .then((res) => res.data)\r\n      .then((data) => {\r\n        setProductTypes(data.content);\r\n        setTotalPages(data.totalPages);\r\n        setTotalElements(data.totalElements);\r\n        setCurrentPage(data.number + 1);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    // if (id === \"\" || id === null) return;\r\n    loadData(currentPage);\r\n  }, []);\r\n\r\n  const handleFormSubmit = (data) => {\r\n    if (productTypeId === null) {\r\n      // add\r\n      productTypeService.add(data).then((res) => {\r\n        toast.success(\"Add new data successfully\");\r\n        loadData(currentPage);\r\n        handleModalClose();\r\n      });\r\n    } else {\r\n      // update\r\n      productTypeService.update(productTypeId, data).then((res) => {\r\n        toast.success(\"Update data successfully\");\r\n        loadData(currentPage);\r\n        handleModalClose();\r\n      });\r\n    }\r\n  };\r\n\r\n  const deleteRow = (e, dataId) => {\r\n    e.preventDefault();\r\n    productTypeService.remove(dataId).then((res) => {\r\n      toast.warning(\"A data has been deleted!\");\r\n      loadData(currentPage);\r\n    });\r\n  };\r\n\r\n  const changePage = (event) => {\r\n    let targetPage = parseInt(event.target.value);\r\n    if (search) {\r\n      searchData(targetPage);\r\n    } else {\r\n      loadData(targetPage);\r\n    }\r\n\r\n    event.target.name = targetPage;\r\n  };\r\n\r\n  const firstPage = () => {\r\n    let firstPage = 1;\r\n    if (currentPage > firstPage) {\r\n      if (search) {\r\n        searchData(firstPage);\r\n      } else {\r\n        loadData(firstPage);\r\n      }\r\n    }\r\n  };\r\n\r\n  const prevPage = () => {\r\n    let prevPage = 1;\r\n    if (currentPage > prevPage) {\r\n      if (search) {\r\n        searchData(currentPage - prevPage);\r\n      } else {\r\n        loadData(currentPage - prevPage);\r\n      }\r\n    }\r\n  };\r\n\r\n  const lastPage = () => {\r\n    let condition = Math.ceil(totalElements / typesPerPage);\r\n    if (currentPage < condition) {\r\n      if (search) {\r\n        searchData(condition);\r\n      } else {\r\n        loadData(condition);\r\n      }\r\n    }\r\n  };\r\n\r\n  const nextPage = () => {\r\n    if (currentPage < Math.ceil(totalElements / typesPerPage)) {\r\n      if (search) {\r\n        searchData(currentPage + 1);\r\n      } else {\r\n        loadData(currentPage + 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  const searchChange = (event) => {\r\n    const searchText = event.target.value;\r\n    setSearch(searchText);\r\n  };\r\n\r\n  const cancelSearch = () => {\r\n    setSearch(\"\");\r\n    loadData(currentPage);\r\n  };\r\n\r\n  const searchData = (currentPage) => {\r\n    currentPage -= 1;\r\n    axios\r\n      .get(\r\n        \"http://localhost:8080/productTypes/search/\" +\r\n          search +\r\n          \"?page=\" +\r\n          currentPage +\r\n          \"&size=\" +\r\n          typesPerPage\r\n      )\r\n      .then((response) => response.data)\r\n      .then((data) => {\r\n        setProductTypes(data.content);\r\n        setTotalPages(data.totalPages);\r\n        setTotalElements(data.totalElements);\r\n        setCurrentPage(data.number + 1);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"container\">\r\n        <div className=\"container pt-4\">\r\n          <div className=\"row\">\r\n            <div className=\"col-sm-12 col-md-6 col-lg-6\">\r\n              <InputGroup size=\"sm\">\r\n                <FormControl\r\n                  placeholder=\"Search\"\r\n                  name=\"search\"\r\n                  className={\"border-primary bg-light text-dark\"}\r\n                  onChange={searchChange}\r\n                  value={search}\r\n                />\r\n                <InputGroup.Append>\r\n                  <Button\r\n                    size=\"sm\"\r\n                    variant=\"outline-success\"\r\n                    type=\"button\"\r\n                    onClick={searchData}\r\n                  >\r\n                    <i className=\"fas fa-search\"></i>\r\n                  </Button>\r\n                  <Button\r\n                    size=\"sm\"\r\n                    variant=\"outline-danger\"\r\n                    type=\"button\"\r\n                    onClick={cancelSearch}\r\n                  >\r\n                    <i className=\"fas fa-times\"></i>\r\n                  </Button>\r\n                </InputGroup.Append>\r\n              </InputGroup>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"container pt-4\">\r\n          <div className=\"card border-primary bt-primary-5\">\r\n            <div className=\"card-header\">\r\n              <div className=\"row\">\r\n                <div className=\"col\">\r\n                  <h2 className=\"card-title\">Product Type List</h2>\r\n                </div>\r\n                <div className=\"col-auto\">\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-primary\"\r\n                    data-toggle=\"modal\"\r\n                    onClick={() => handleModalShow(null, null)}\r\n                  >\r\n                    <i className=\"fas fa-plus-circle mr-1\"></i>\r\n                    Add\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"card-body\">\r\n              <table className=\"table table-hover table-striped table-bordered text-center\">\r\n                <thead>\r\n                  <tr className=\"table-primary\">\r\n                    <th scope=\"col\">No.</th>\r\n                    <th onClick={sortData} scope=\"col\">\r\n                      Name{\" \"}\r\n                      <div\r\n                        className={\r\n                          sortDir === \"asc\"\r\n                            ? \"arrow arrow-up\"\r\n                            : \"arrow arrow-down\"\r\n                        }\r\n                      ></div>\r\n                    </th>\r\n                    {/* <th scope=\"col\">Description</th> */}\r\n                    <th scope=\"col\"></th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {productTypes.map((productType, idx) => {\r\n                    return (\r\n                      <tr key={productType.id}>\r\n                        <th scope=\"row\">{idx + 1}</th>\r\n                        <td>{productType.name}</td>\r\n                        {/* <td>{productType.description}</td> */}\r\n                        <td>\r\n                          <a\r\n                            href=\"/#\"\r\n                            className=\"mr-2\"\r\n                            onClick={(e) => getProductType(e, productType.id)}\r\n                          >\r\n                            <i className=\"fas fa-eye text-primary\"></i>\r\n                          </a>\r\n                          <a\r\n                            href=\"/#\"\r\n                            className=\"mr-2\"\r\n                            onClick={(e) => handleModalShow(e, productType.id)}\r\n                          >\r\n                            <i className=\"fas fa-edit text-success\"></i>\r\n                          </a>\r\n                          <a\r\n                            href=\"/#\"\r\n                            onClick={(e) => deleteRow(e, productType.id)}\r\n                          >\r\n                            <i className=\"fas fa-trash-alt text-danger\"></i>\r\n                          </a>\r\n                        </td>\r\n                      </tr>\r\n                    );\r\n                  })}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n            {productTypes.length > 0 ? (\r\n              <div className=\"card-footer\">\r\n                <div style={{ float: \"left\" }}>\r\n                  Showing Page {currentPage} of {totalPages}\r\n                </div>\r\n                <div style={{ float: \"right\" }}>\r\n                  <InputGroup size=\"sm\">\r\n                    <InputGroup.Prepend>\r\n                      <Button\r\n                        type=\"button\"\r\n                        variant=\"outline-primary\"\r\n                        disabled={currentPage === 1 ? true : false}\r\n                        onClick={firstPage}\r\n                      >\r\n                        <i className=\"fas fa-fast-backward\"></i> First\r\n                      </Button>\r\n                      <Button\r\n                        type=\"button\"\r\n                        variant=\"outline-primary\"\r\n                        disabled={currentPage === 1 ? true : false}\r\n                        onClick={prevPage}\r\n                      >\r\n                        <i className=\"fas fa-step-backward\"></i> Prev\r\n                      </Button>\r\n                    </InputGroup.Prepend>\r\n                    <FormControl\r\n                      className={\"page-num bg-light border-primary\"}\r\n                      name=\"currentPage\"\r\n                      value={currentPage}\r\n                      onChange={changePage}\r\n                    />\r\n                    <InputGroup.Append>\r\n                      <Button\r\n                        type=\"button\"\r\n                        variant=\"outline-primary\"\r\n                        disabled={currentPage === totalPages ? true : false}\r\n                        onClick={nextPage}\r\n                      >\r\n                        <i className=\"fas fa-step-forward\"></i> Next\r\n                      </Button>\r\n                      <Button\r\n                        type=\"button\"\r\n                        variant=\"outline-primary\"\r\n                        disabled={currentPage === totalPages ? true : false}\r\n                        onClick={lastPage}\r\n                      >\r\n                        <i className=\"fas fa-fast-forward\"></i> Last\r\n                      </Button>\r\n                    </InputGroup.Append>\r\n                  </InputGroup>\r\n                </div>\r\n              </div>\r\n            ) : null}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Modal */}\r\n      <Modal\r\n        show={modalShow}\r\n        onHide={handleModalClose}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Product Types</Modal.Title>\r\n        </Modal.Header>\r\n        <form onSubmit={formik.handleSubmit}>\r\n          <Modal.Body>\r\n            <Input\r\n              id=\"txtName\"\r\n              type=\"text\"\r\n              label=\"Name\"\r\n              maxLength=\"100\"\r\n              frmField={formik.getFieldProps(\"name\")}\r\n              err={formik.touched.name && formik.errors.name}\r\n              errMessage={formik.errors.name}\r\n            />\r\n            <div className=\"form-group row\"></div>\r\n            <Input\r\n              id=\"txtDesc\"\r\n              rows=\"10\"\r\n              type=\"text\"\r\n              label=\"Description\"\r\n              maxLength=\"200\"\r\n              frmField={formik.getFieldProps(\"description\")}\r\n            />\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={handleModalClose}>\r\n              Close\r\n            </Button>\r\n            <Button\r\n              variant=\"primary\"\r\n              type=\"submit\"\r\n              disabled={!(formik.isValid && formik.dirty)}\r\n            >\r\n              Save\r\n            </Button>\r\n          </Modal.Footer>\r\n        </form>\r\n      </Modal>\r\n      {/* End modal */}\r\n\r\n      <Modal\r\n        show={detail}\r\n        onHide={handleDetailClose}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Product Type Detail</Modal.Title>\r\n        </Modal.Header>\r\n\r\n        <Modal.Body>\r\n          <Input\r\n            label=\"Name\"\r\n            frmField={formik.getFieldProps(\"name\")}\r\n            readonly\r\n          />\r\n          <Input\r\n            label=\"Description\"\r\n            frmField={formik.getFieldProps(\"description\")}\r\n            readonly\r\n            rows=\"10\"\r\n          />\r\n        </Modal.Body>\r\n      </Modal>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ProductTypeList;\r\n","D:\\Group Project\\Unicorn\\restaurant-management\\src\\pages\\products\\ProductList.js",["90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105"],"import React, { useState, Fragment, useEffect } from \"react\";\r\nimport Input from \"../../controls/Input\";\r\nimport { Button, FormControl, InputGroup, Modal } from \"react-bootstrap\";\r\nimport productService from \"../../services/productService\";\r\nimport { useFormik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport productTypeService from \"../../services/productTypeService\";\r\n\r\nconst ProductList = (props) => {\r\n  const [productTypes, setProductTypes] = useState([]);\r\n  const [products, setProducts] = useState([]);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [totalPages, setTotalPages] = useState(0);\r\n  const [totalElements, setTotalElements] = useState(0);\r\n  const [sortDir, setSortDir] = useState(\"asc\");\r\n  const [search, setSearch] = useState(\"\");\r\n\r\n  const [modalShow, setModalShow] = useState(false);\r\n\r\n  // radio button\r\n  // product status\r\n  const handleRadioChange = (value) => {\r\n    formik.setFieldValue(\"status\", value);\r\n  };\r\n\r\n  // get product ID\r\n  const [detail, setDetail] = useState(false);\r\n  const handleDetailClose = () => setDetail(false);\r\n  const [productId, setProductId] = useState(0);\r\n\r\n  const getProduct = (e, dataId) => {\r\n    if (e) {\r\n      e.preventDefault();\r\n    }\r\n    setProductId(dataId);\r\n    if (dataId > 0) {\r\n      // edit\r\n      productService.get(dataId).then((res) => {\r\n        formik.setValues(res);\r\n        // setDetail(true);\r\n        console.log(res);\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleModalClose = () => setModalShow(false);\r\n  const handleModalShow = (e, dataId) => {\r\n    if (e) {\r\n      e.preventDefault();\r\n    }\r\n    // const id = parseInt(dataId);\r\n    setProductId(dataId);\r\n    if (dataId > 0) {\r\n      // edit\r\n      productService.get(dataId).then((res) => {\r\n        console.log(res.image);\r\n        console.log(res);\r\n        formik.setValues({\r\n          code: res.code,\r\n          name: res.name,\r\n          unit: res.unit,\r\n          price: res.price,\r\n          status: res.status,\r\n          image: res.image,\r\n          description: res.description,\r\n          proTypeId: res.productType.id,\r\n        });\r\n        setImageReview(res.image);\r\n        setModalShow(true);\r\n      });\r\n    } else {\r\n      // add\r\n      formik.resetForm();\r\n      setModalShow(true);\r\n    }\r\n  };\r\n\r\n  const loadData = () => {\r\n    productTypeService.getAll().then((res) => {\r\n      setProductTypes(res);\r\n    });\r\n    productService.getAll().then((res) => {\r\n      setProducts(res);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    // if (id === \"\" || id === null) return;\r\n    // setStateValues(statusArr);\r\n    loadData();\r\n  }, []);\r\n\r\n  // Validation\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      code: \"\",\r\n      name: \"\",\r\n      unit: \"\",\r\n      price: \"\",\r\n      status: \"AVAILABLE\",\r\n      image: \"\",\r\n      description: \"\",\r\n      proTypeId: \"\",\r\n    },\r\n    validationSchema: Yup.object({\r\n      code: Yup.string().required(\"Required\"),\r\n      name: Yup.string().required(\"Required\"),\r\n      unit: Yup.string().required(\"Required\"),\r\n      price: Yup.number().required(\"Required\"),\r\n    }),\r\n    onSubmit: (values) => {\r\n      console.log(values);\r\n      handleFormSubmit(values);\r\n    },\r\n  });\r\n\r\n  // image handle\r\n  // const fileRef = React.createRef();\r\n  const [selectedFile, setSelectFile] = useState(null);\r\n  const [imageReview, setImageReview] = useState(\"\");\r\n\r\n  // const handleImageReview = (e) => {\r\n  //   // e.preventDefault();\r\n  //   setSelectFile(e.target.files[0]);\r\n  //   setImageReview(URL.createObjectURL(e.target.files[0]));\r\n  // };\r\n\r\n  // selection\r\n  // const onChangeSelected = (e) => {\r\n  //   console.log(e);\r\n  // };\r\n\r\n  const handleFormSubmit = (data) => {\r\n    const formData = new FormData();\r\n    formData.append(\"code\", data.code);\r\n    formData.append(\"name\", data.name);\r\n    formData.append(\"proTypeId\", data.proTypeId);\r\n    formData.append(\"unit\", data.unit);\r\n    formData.append(\"price\", Number(data.price));\r\n    formData.append(\"status\", data.status);\r\n    formData.append(\"description\", data.description);\r\n    formData.append(\"photo\", data.image);\r\n    if (productId === null) {\r\n      console.log(data);\r\n      // add\r\n\r\n      // console.log(fileRef.current.files);\r\n      // console.log(fileRef.file);\r\n      // console.log(formData.values);\r\n      for (var value of formData.values()) {\r\n        console.log(value);\r\n      }\r\n\r\n      productService.add(formData).then((res) => {\r\n        toast.success(\"Add new data successfully\");\r\n        loadData();\r\n        handleModalClose();\r\n      });\r\n    } else {\r\n      // update\r\n      if (data.image.name === undefined) {\r\n        productService\r\n          .update(\r\n            productId,\r\n            data.code,\r\n            data.name,\r\n            data.proTypeId,\r\n            data.unit,\r\n            data.price,\r\n            data.status,\r\n            data.description\r\n          )\r\n          .then((res) => {\r\n            toast.success(\"Update data successfully\");\r\n            loadData();\r\n            handleModalClose();\r\n          });\r\n      } else {\r\n        console.log(\"Update hinhf\");\r\n        productService\r\n          .updateWithPhoto(\r\n            productId,\r\n            data.code,\r\n            data.name,\r\n            data.proTypeId,\r\n            data.unit,\r\n            data.price,\r\n            data.status,\r\n            data.description,\r\n            data.image\r\n          )\r\n          .then((res) => {\r\n            toast.success(\"Update data successfully oke\");\r\n            loadData();\r\n            handleModalClose();\r\n          });\r\n      }\r\n    }\r\n  };\r\n\r\n  const deleteRow = (e, dataId) => {\r\n    e.preventDefault();\r\n    productService.remove(dataId).then((res) => {\r\n      toast.warning(\"A data has been deleted!\");\r\n      loadData();\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"container\">\r\n        <div className=\"container pt-4\">\r\n          <div className=\"card border-primary bt-primary-5\">\r\n            <div className=\"card-header\">\r\n              <div className=\"row\">\r\n                <div className=\"col\">\r\n                  <h2 className=\"card-title\">Product Type List</h2>\r\n                </div>\r\n                <div className=\"col-auto\">\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-primary\"\r\n                    data-toggle=\"modal\"\r\n                    onClick={() => handleModalShow(null, null)}\r\n                  >\r\n                    <i className=\"fas fa-plus-circle mr-1\"></i>\r\n                    Add\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"card-body\">\r\n              <table className=\"table table-hover table-striped table-sm table-bordered text-center\">\r\n                <thead>\r\n                  <tr className=\"table-primary\">\r\n                    <th scope=\"col\">No.</th>\r\n                    {/* <th onClick={sortData} scope=\"col\">\r\n                      Name{\" \"}\r\n                      <div\r\n                        className={\r\n                          sortDir === \"asc\"\r\n                            ? \"arrow arrow-up\"\r\n                            : \"arrow arrow-down\"\r\n                        }\r\n                      ></div>\r\n                    </th> */}\r\n                    <th scope=\"col\">Code</th>\r\n                    <th scope=\"col\">Name</th>\r\n                    <th scope=\"col\">Unit</th>\r\n                    <th scope=\"col\">Price</th>\r\n                    <th scope=\"col\">Status</th>\r\n                    <th scope=\"col\">Image</th>\r\n                    {/* <th scope=\"col\">Description</th> */}\r\n                    <th scope=\"col\">Type</th>\r\n                    <th scope=\"col\">Actions</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {products.map((product, idx) => {\r\n                    return (\r\n                      <tr key={product.id}>\r\n                        <th scope=\"row\">{idx + 1}</th>\r\n                        <td>{product.code}</td>\r\n                        <td>{product.name}</td>\r\n                        <td>{product.unit}</td>\r\n                        <td>{product.price}</td>\r\n                        <td>{product.status}</td>\r\n                        <td>\r\n                          <img\r\n                            src={product.image}\r\n                            alt={product.name}\r\n                            style={{ width: \"200px\", height: \"150px\" }}\r\n                          />\r\n                        </td>\r\n                        <td>{product.productType.name}</td>\r\n                        <td>\r\n                          <a\r\n                            href=\"/#\"\r\n                            className=\"mr-2\"\r\n                            onClick={(e) => getProduct(e, product.id)}\r\n                          >\r\n                            <i className=\"fas fa-eye text-primary\"></i>\r\n                          </a>\r\n                          <a\r\n                            href=\"/#\"\r\n                            className=\"mr-2\"\r\n                            onClick={(e) => handleModalShow(e, product.id)}\r\n                          >\r\n                            <i className=\"fas fa-edit text-success\"></i>\r\n                          </a>\r\n                          <a\r\n                            href=\"/#\"\r\n                            onClick={(e) => deleteRow(e, product.id)}\r\n                          >\r\n                            <i className=\"fas fa-trash-alt text-danger\"></i>\r\n                          </a>\r\n                        </td>\r\n                      </tr>\r\n                    );\r\n                  })}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n            {/* {productTypes.length > 0 ? (\r\n              <div className=\"card-footer\">\r\n                <div style={{ float: \"left\" }}>\r\n                  Showing Page {currentPage} of {totalPages}\r\n                </div>\r\n                <div style={{ float: \"right\" }}>\r\n                  <InputGroup size=\"sm\">\r\n                    <InputGroup.Prepend>\r\n                      <Button\r\n                        type=\"button\"\r\n                        variant=\"outline-primary\"\r\n                        disabled={currentPage === 1 ? true : false}\r\n                        onClick={firstPage}\r\n                      >\r\n                        <i className=\"fas fa-fast-backward\"></i> First\r\n                      </Button>\r\n                      <Button\r\n                        type=\"button\"\r\n                        variant=\"outline-primary\"\r\n                        disabled={currentPage === 1 ? true : false}\r\n                        onClick={prevPage}\r\n                      >\r\n                        <i className=\"fas fa-step-backward\"></i> Prev\r\n                      </Button>\r\n                    </InputGroup.Prepend>\r\n                    <FormControl\r\n                      className={\"page-num bg-light border-primary\"}\r\n                      name=\"currentPage\"\r\n                      value={currentPage}\r\n                      onChange={changePage}\r\n                    />\r\n                    <InputGroup.Append>\r\n                      <Button\r\n                        type=\"button\"\r\n                        variant=\"outline-primary\"\r\n                        disabled={currentPage === totalPages ? true : false}\r\n                        onClick={nextPage}\r\n                      >\r\n                        <i className=\"fas fa-step-forward\"></i> Next\r\n                      </Button>\r\n                      <Button\r\n                        type=\"button\"\r\n                        variant=\"outline-primary\"\r\n                        disabled={currentPage === totalPages ? true : false}\r\n                        onClick={lastPage}\r\n                      >\r\n                        <i className=\"fas fa-fast-forward\"></i> Last\r\n                      </Button>\r\n                    </InputGroup.Append>\r\n                  </InputGroup>\r\n                </div>\r\n              </div>\r\n            ) : null} */}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <Modal\r\n        show={modalShow}\r\n        onHide={handleModalClose}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Product Types</Modal.Title>\r\n        </Modal.Header>\r\n        <form onSubmit={formik.handleSubmit}>\r\n          <Modal.Body>\r\n            <select\r\n              id=\"proTypeId\"\r\n              name=\"proTypeId\"\r\n              //value={formik.values.proTypeId}\r\n              // onChange={(value) => formik.setFieldValue(\"proTypeId\", value)}\r\n              onChange={formik.handleChange}\r\n              {...formik.getFieldProps(\"proTypeId\")}\r\n              // frmField={formik.getFieldProps(\"proTypeId\")}\r\n            >\r\n              <option>--Select product Type--</option>\r\n              {productTypes.map((type) => {\r\n                return (\r\n                  <option key={type.id} value={type.id}>\r\n                    {type.name}\r\n                  </option>\r\n                );\r\n              })}\r\n            </select>\r\n            <Input\r\n              id=\"txtCode\"\r\n              type=\"text\"\r\n              label=\"Code\"\r\n              maxLength=\"100\"\r\n              frmField={formik.getFieldProps(\"code\")}\r\n              err={formik.touched.code && formik.errors.code}\r\n              errMessage={formik.errors.code}\r\n            />\r\n            <Input\r\n              id=\"txtName\"\r\n              type=\"text\"\r\n              label=\"Name\"\r\n              maxLength=\"100\"\r\n              frmField={formik.getFieldProps(\"name\")}\r\n              err={formik.touched.name && formik.errors.name}\r\n              errMessage={formik.errors.name}\r\n            />\r\n            <Input\r\n              id=\"txtUnit\"\r\n              type=\"text\"\r\n              label=\"Unit\"\r\n              maxLength=\"100\"\r\n              frmField={formik.getFieldProps(\"unit\")}\r\n              err={formik.touched.unit && formik.errors.unit}\r\n              errMessage={formik.errors.unit}\r\n            />\r\n            <Input\r\n              id=\"txtPrice\"\r\n              type=\"text\"\r\n              label=\"Price\"\r\n              maxLength=\"100\"\r\n              frmField={formik.getFieldProps(\"price\")}\r\n              err={formik.touched.price && formik.errors.price}\r\n              errMessage={formik.errors.price}\r\n            />\r\n            <fieldset className=\"form-group\">\r\n              <div className=\"row\">\r\n                <label className=\"col-form-label col-sm-3 pt-0\">Status</label>\r\n                <div className=\"col-sm-9\">\r\n                  <div className=\"form-check\">\r\n                    <input\r\n                      id=\"status\"\r\n                      className=\"form-check-input\"\r\n                      type=\"radio\"\r\n                      name=\"status\"\r\n                      // defaultChecked\r\n                      checked={formik.values.status === \"AVAILABLE\"}\r\n                      //={formik.values.status === \"AVAILABLE\"}\r\n                      onChange={() => handleRadioChange(\"AVAILABLE\")}\r\n                      value=\"AVAILABLE\"\r\n                    />\r\n                    <label className=\"form-check-label\">AVAILABLE</label>\r\n                  </div>\r\n                  <div className=\"form-check\">\r\n                    <input\r\n                      id=\"status\"\r\n                      className=\"form-check-input\"\r\n                      type=\"radio\"\r\n                      name=\"status\"\r\n                      checked={formik.values.status === \"UNAVAILABLE\"}\r\n                      onChange={() => handleRadioChange(\"UNAVAILABLE\")}\r\n                      value=\"UNAVAILABLE\"\r\n                    />\r\n                    <label className=\"form-check-label\">UNAVAILABLE</label>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </fieldset>\r\n            <div className=\"form-group row\">\r\n              <label className=\"col-form-label col-sm-3 pt-0\">Image</label>\r\n              <div className=\"col-sm-9\">\r\n                <img className=\"img-fluid\" src={imageReview} alt=\"example\" />\r\n                <input\r\n                  type=\"file\"\r\n                  // ref={fileRef}\r\n                  onChange={(e) => {\r\n                    setSelectFile(e.currentTarget.files[0]);\r\n                    setImageReview(\r\n                      URL.createObjectURL(e.currentTarget.files[0])\r\n                    );\r\n                    console.log(e.currentTarget.files[0]);\r\n                    formik.setFieldValue(\"image\", e.currentTarget.files[0]);\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n            <Input\r\n              id=\"txtDesc\"\r\n              rows=\"10\"\r\n              type=\"text\"\r\n              label=\"Description\"\r\n              maxLength=\"200\"\r\n              frmField={formik.getFieldProps(\"description\")}\r\n            />\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={handleModalClose}>\r\n              Close\r\n            </Button>\r\n            <Button\r\n              variant=\"primary\"\r\n              type=\"submit\"\r\n              disabled={!(formik.isValid && formik.dirty)}\r\n            >\r\n              Save\r\n            </Button>\r\n          </Modal.Footer>\r\n        </form>\r\n      </Modal>\r\n      {/* End modal */}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ProductList;\r\n","D:\\Group Project\\Unicorn\\restaurant-management\\src\\controls\\Input.js",[],"D:\\Group Project\\Unicorn\\restaurant-management\\src\\services\\productTypeService.js",[],"D:\\Group Project\\Unicorn\\restaurant-management\\src\\services\\productService.js",["106"],"import { Fragment } from \"react\";\r\nimport api from \"../services/api\";\r\n\r\nconst getAll = () =>\r\n  api.get(`${api.url.products}/getAllProducts`).then((res) => res.data);\r\nconst get = (id) =>\r\n  api.get(`${api.url.products}/${id}`).then((res) => res.data);\r\nconst add = (formData) => {\r\n  return api\r\n    .post(api.url.products, formData, {\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n      },\r\n    })\r\n    .then((res) => res.data);\r\n};\r\nconst update = (\r\n  id,\r\n  code,\r\n  name,\r\n  proTypeId,\r\n  unit,\r\n  price,\r\n  status,\r\n  description\r\n) => {\r\n  const formData = new FormData();\r\n  formData.append(\"code\", code);\r\n  formData.append(\"name\", name);\r\n  formData.append(\"proTypeId\", proTypeId);\r\n  formData.append(\"unit\", unit);\r\n  formData.append(\"price\", Number(price));\r\n  formData.append(\"status\", status);\r\n  formData.append(\"description\", description);\r\n  return api\r\n    .put(`${api.url.products}/updateProductWTI/${id}`, formData, {\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n      },\r\n    })\r\n    .then((res) => res.data);\r\n};\r\n\r\nconst updateWithPhoto = (\r\n  id,\r\n  code,\r\n  name,\r\n  proTypeId,\r\n  unit,\r\n  price,\r\n  status,\r\n  description,\r\n  photo\r\n) => {\r\n  const formData = new FormData();\r\n  formData.append(\"code\", code);\r\n  formData.append(\"name\", name);\r\n  formData.append(\"proTypeId\", proTypeId);\r\n  formData.append(\"unit\", unit);\r\n  formData.append(\"price\", Number(price));\r\n  formData.append(\"status\", status);\r\n  formData.append(\"description\", description);\r\n  formData.append(\"photo\", photo);\r\n  return api\r\n    .put(`${api.url.products}/updateProduct/${id}`, formData, {\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n      },\r\n    })\r\n    .then((res) => res.data);\r\n};\r\nconst remove = (id) =>\r\n  api.delete(`${api.url.products}/${id}`).then((res) => res.data);\r\n\r\nconst productService = {\r\n  getAll,\r\n  get,\r\n  add,\r\n  update,\r\n  updateWithPhoto,\r\n  remove,\r\n};\r\n\r\nexport default productService;\r\n","D:\\Group Project\\Unicorn\\restaurant-management\\src\\services\\api.js",[],"D:\\Group Project\\Unicorn\\restaurant-management\\src\\pages\\working-sites\\workingSiteList.jsx",["107","108"],"D:\\Group Project\\Unicorn\\restaurant-management\\src\\services\\workingSiteService.js",[],{"ruleId":"109","severity":1,"message":"110","line":9,"column":8,"nodeType":"111","messageId":"112","endLine":9,"endColumn":9},{"ruleId":"109","severity":1,"message":"113","line":10,"column":8,"nodeType":"111","messageId":"112","endLine":10,"endColumn":14},{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"109","severity":1,"message":"118","line":13,"column":24,"nodeType":"111","messageId":"112","endLine":13,"endColumn":39},{"ruleId":"109","severity":1,"message":"119","line":55,"column":10,"nodeType":"111","messageId":"112","endLine":55,"endColumn":12},{"ruleId":"109","severity":1,"message":"120","line":55,"column":14,"nodeType":"111","messageId":"112","endLine":55,"endColumn":19},{"ruleId":"121","severity":1,"message":"122","line":110,"column":6,"nodeType":"123","endLine":110,"endColumn":8,"suggestions":"124"},{"ruleId":"109","severity":1,"message":"125","line":3,"column":18,"nodeType":"111","messageId":"112","endLine":3,"endColumn":29},{"ruleId":"109","severity":1,"message":"126","line":3,"column":31,"nodeType":"111","messageId":"112","endLine":3,"endColumn":41},{"ruleId":"109","severity":1,"message":"127","line":7,"column":8,"nodeType":"111","messageId":"112","endLine":7,"endColumn":13},{"ruleId":"109","severity":1,"message":"128","line":14,"column":10,"nodeType":"111","messageId":"112","endLine":14,"endColumn":21},{"ruleId":"109","severity":1,"message":"129","line":14,"column":23,"nodeType":"111","messageId":"112","endLine":14,"endColumn":37},{"ruleId":"109","severity":1,"message":"130","line":15,"column":10,"nodeType":"111","messageId":"112","endLine":15,"endColumn":20},{"ruleId":"109","severity":1,"message":"131","line":15,"column":22,"nodeType":"111","messageId":"112","endLine":15,"endColumn":35},{"ruleId":"109","severity":1,"message":"132","line":16,"column":10,"nodeType":"111","messageId":"112","endLine":16,"endColumn":23},{"ruleId":"109","severity":1,"message":"133","line":16,"column":25,"nodeType":"111","messageId":"112","endLine":16,"endColumn":41},{"ruleId":"109","severity":1,"message":"134","line":17,"column":10,"nodeType":"111","messageId":"112","endLine":17,"endColumn":17},{"ruleId":"109","severity":1,"message":"135","line":17,"column":19,"nodeType":"111","messageId":"112","endLine":17,"endColumn":29},{"ruleId":"109","severity":1,"message":"136","line":18,"column":10,"nodeType":"111","messageId":"112","endLine":18,"endColumn":16},{"ruleId":"109","severity":1,"message":"137","line":18,"column":18,"nodeType":"111","messageId":"112","endLine":18,"endColumn":27},{"ruleId":"109","severity":1,"message":"138","line":29,"column":10,"nodeType":"111","messageId":"112","endLine":29,"endColumn":16},{"ruleId":"109","severity":1,"message":"139","line":30,"column":9,"nodeType":"111","messageId":"112","endLine":30,"endColumn":26},{"ruleId":"109","severity":1,"message":"140","line":121,"column":10,"nodeType":"111","messageId":"112","endLine":121,"endColumn":22},{"ruleId":"109","severity":1,"message":"141","line":1,"column":10,"nodeType":"111","messageId":"112","endLine":1,"endColumn":18},{"ruleId":"109","severity":1,"message":"118","line":13,"column":24,"nodeType":"111","messageId":"112","endLine":13,"endColumn":39},{"ruleId":"121","severity":1,"message":"122","line":73,"column":6,"nodeType":"123","endLine":73,"endColumn":8,"suggestions":"142"},"no-unused-vars","'$' is defined but never used.","Identifier","unusedVar","'Popper' is defined but never used.","no-native-reassign",["143"],"no-negated-in-lhs",["144"],"'setTypesPerPage' is assigned a value but never used.","'id' is assigned a value but never used.","'setId' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'currentPage' and 'loadData'. Either include them or remove the dependency array.","ArrayExpression",["145"],"'FormControl' is defined but never used.","'InputGroup' is defined but never used.","'axios' is defined but never used.","'currentPage' is assigned a value but never used.","'setCurrentPage' is assigned a value but never used.","'totalPages' is assigned a value but never used.","'setTotalPages' is assigned a value but never used.","'totalElements' is assigned a value but never used.","'setTotalElements' is assigned a value but never used.","'sortDir' is assigned a value but never used.","'setSortDir' is assigned a value but never used.","'search' is assigned a value but never used.","'setSearch' is assigned a value but never used.","'detail' is assigned a value but never used.","'handleDetailClose' is assigned a value but never used.","'selectedFile' is assigned a value but never used.","'Fragment' is defined but never used.",["146"],"no-global-assign","no-unsafe-negation",{"desc":"147","fix":"148"},{"desc":"147","fix":"149"},"Update the dependencies array to be: [currentPage, loadData]",{"range":"150","text":"151"},{"range":"152","text":"151"},[3109,3111],"[currentPage, loadData]",[2152,2154]]