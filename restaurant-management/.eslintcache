[{"E:\\Thuc Tap ISC\\Do-an-thuc-tap\\Unicorn\\restaurant-management\\src\\index.js":"1","E:\\Thuc Tap ISC\\Do-an-thuc-tap\\Unicorn\\restaurant-management\\src\\reportWebVitals.js":"2","E:\\Thuc Tap ISC\\Do-an-thuc-tap\\Unicorn\\restaurant-management\\src\\App.js":"3","E:\\Thuc Tap ISC\\Do-an-thuc-tap\\Unicorn\\restaurant-management\\src\\containers\\DefaultLayout.js":"4","E:\\Thuc Tap ISC\\Do-an-thuc-tap\\Unicorn\\restaurant-management\\src\\routes.js":"5","E:\\Thuc Tap ISC\\Do-an-thuc-tap\\Unicorn\\restaurant-management\\src\\containers\\Header.js":"6","E:\\Thuc Tap ISC\\Do-an-thuc-tap\\Unicorn\\restaurant-management\\src\\containers\\Footer.js":"7","E:\\Thuc Tap ISC\\Do-an-thuc-tap\\Unicorn\\restaurant-management\\src\\containers\\Welcome.js":"8","E:\\Thuc Tap ISC\\Do-an-thuc-tap\\Unicorn\\restaurant-management\\src\\services\\productTypeService.js":"9","E:\\Thuc Tap ISC\\Do-an-thuc-tap\\Unicorn\\restaurant-management\\src\\controls\\Input.js":"10","E:\\Thuc Tap ISC\\Do-an-thuc-tap\\Unicorn\\restaurant-management\\src\\services\\api.js":"11","E:\\Thuc Tap ISC\\Do-an-thuc-tap\\Unicorn\\restaurant-management\\src\\pages\\ProductTypeList.js":"12","E:\\Thuc Tap ISC\\Do-an-thuc-tap\\Unicorn\\restaurant-management\\src\\pages\\PositionList.js":"13","E:\\Thuc Tap ISC\\Do-an-thuc-tap\\Unicorn\\restaurant-management\\src\\services\\positionService.js":"14","E:\\Thuc Tap ISC\\Do-an-thuc-tap\\Unicorn\\restaurant-management\\src\\pages\\EmployeeList.js":"15","E:\\Thuc Tap ISC\\Do-an-thuc-tap\\Unicorn\\restaurant-management\\src\\services\\employeeService.js":"16"},{"size":1171,"mtime":1609049489211,"results":"17","hashOfConfig":"18"},{"size":375,"mtime":1608265061594,"results":"19","hashOfConfig":"18"},{"size":314,"mtime":1608265061591,"results":"20","hashOfConfig":"18"},{"size":826,"mtime":1608265061592,"results":"21","hashOfConfig":"18"},{"size":722,"mtime":1608868769069,"results":"22","hashOfConfig":"18"},{"size":2434,"mtime":1608797102444,"results":"23","hashOfConfig":"18"},{"size":539,"mtime":1608265061592,"results":"24","hashOfConfig":"18"},{"size":598,"mtime":1608623141713,"results":"25","hashOfConfig":"18"},{"size":617,"mtime":1608265061594,"results":"26","hashOfConfig":"18"},{"size":2153,"mtime":1609052819764,"results":"27","hashOfConfig":"18"},{"size":496,"mtime":1608886795726,"results":"28","hashOfConfig":"18"},{"size":12829,"mtime":1608964290764,"results":"29","hashOfConfig":"18"},{"size":12502,"mtime":1609141286706,"results":"30","hashOfConfig":"18"},{"size":638,"mtime":1608957337178,"results":"31","hashOfConfig":"18"},{"size":19466,"mtime":1609141057587,"results":"32","hashOfConfig":"18"},{"size":638,"mtime":1608957762376,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},"173lfzp",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"37"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"E:\\Thuc Tap ISC\\Do-an-thuc-tap\\Unicorn\\restaurant-management\\src\\index.js",["69","70"],"import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../node_modules/@fortawesome/fontawesome-free/css/all.min.css\";\r\nimport $ from \"jquery\";\r\nimport Popper from \"popper.js\";\r\nimport \"../node_modules/bootstrap/dist/js/bootstrap.bundle.min\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\n// add react toastify \r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\ntoast.configure({\r\n  autoClose: 3000,\r\n  draggable: false,\r\n  position: \"top-right\",\r\n  hideProgressBar: false,\r\n  newestOnTop: true,\r\n  closeOnClick: true,\r\n  rtl: false,\r\n  pauseOnFocusLoss: true,\r\n  pauseOnHover: true,\r\n});\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n",["71","72"],"E:\\Thuc Tap ISC\\Do-an-thuc-tap\\Unicorn\\restaurant-management\\src\\reportWebVitals.js",[],"E:\\Thuc Tap ISC\\Do-an-thuc-tap\\Unicorn\\restaurant-management\\src\\App.js",[],"E:\\Thuc Tap ISC\\Do-an-thuc-tap\\Unicorn\\restaurant-management\\src\\containers\\DefaultLayout.js",[],"E:\\Thuc Tap ISC\\Do-an-thuc-tap\\Unicorn\\restaurant-management\\src\\routes.js",[],"E:\\Thuc Tap ISC\\Do-an-thuc-tap\\Unicorn\\restaurant-management\\src\\containers\\Header.js",[],"E:\\Thuc Tap ISC\\Do-an-thuc-tap\\Unicorn\\restaurant-management\\src\\containers\\Footer.js",[],"E:\\Thuc Tap ISC\\Do-an-thuc-tap\\Unicorn\\restaurant-management\\src\\containers\\Welcome.js",[],"E:\\Thuc Tap ISC\\Do-an-thuc-tap\\Unicorn\\restaurant-management\\src\\services\\productTypeService.js",[],"E:\\Thuc Tap ISC\\Do-an-thuc-tap\\Unicorn\\restaurant-management\\src\\controls\\Input.js",[],"E:\\Thuc Tap ISC\\Do-an-thuc-tap\\Unicorn\\restaurant-management\\src\\services\\api.js",[],"E:\\Thuc Tap ISC\\Do-an-thuc-tap\\Unicorn\\restaurant-management\\src\\pages\\ProductTypeList.js",["73","74","75","76"],"import React, { useState, Fragment, useEffect } from \"react\";\r\nimport { Button, FormControl, InputGroup, Modal } from \"react-bootstrap\";\r\nimport productTypeService from \"../services/productTypeService\";\r\nimport { useFormik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport axios from \"axios\";\r\nimport \"./style.css\";\r\nimport Input from \"../controls/Input\";\r\n\r\nconst ProductTypeList = (props) => {\r\n  const [productTypes, setProductTypes] = useState([]);\r\n  const [typesPerPage, setTypesPerPage] = useState(6);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [totalPages, setTotalPages] = useState(0);\r\n  const [totalElements, setTotalElements] = useState(0);\r\n  const [sortDir, setSortDir] = useState(\"asc\");\r\n  const [search, setSearch] = useState(\"\");\r\n\r\n  // Validation\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      name: \"\",\r\n      description: \"\",\r\n    },\r\n    validationSchema: Yup.object({\r\n      name: Yup.string()\r\n        .required(\"Required\")\r\n        // .min(5, \"Must be 5 characters or more.\"),\r\n    }),\r\n    onSubmit: (values) => {\r\n      console.log(values);\r\n      handleFormSubmit(values);\r\n    },\r\n  });\r\n\r\n  const [modalShow, setModalShow] = useState(false);\r\n  const [id, setId] = useState(1);\r\n  const [productTypeId, setProductTypeId] = useState(0);\r\n  const handleModalClose = () => setModalShow(false);\r\n  const handleModalShow = (e, dataId) => {\r\n    if (e) {\r\n      e.preventDefault();\r\n    }\r\n    setProductTypeId(dataId);\r\n    if (dataId > 0) {\r\n      // edit\r\n      productTypeService.get(dataId).then((res) => {\r\n        formik.setValues(res);\r\n        setModalShow(true);\r\n      });\r\n    } else {\r\n      // add\r\n      formik.resetForm();\r\n      setModalShow(true);\r\n    }\r\n  };\r\n\r\n  const sortData = () => {\r\n    setTimeout(() => {\r\n      sortDir === \"asc\" ? setSortDir(\"desc\") : setSortDir(\"asc\");\r\n      loadData(currentPage);\r\n    }, 500);\r\n  };\r\n\r\n  const loadData = (currentPage) => {\r\n    // productTypeService.getAll().then((res) => {\r\n    //   setProductTypes(res);\r\n    // });\r\n    currentPage -= 1;\r\n    axios\r\n      .get(\r\n        \"http://localhost:8080/productTypes?pageNumber=\" +\r\n          currentPage +\r\n          \"&pageSize=\" +\r\n          typesPerPage +\r\n          \"&sortBy=name&sortDir=\" +\r\n          sortDir\r\n      )\r\n      .then((res) => res.data)\r\n      .then((data) => {\r\n        setProductTypes(data.content);\r\n        setTotalPages(data.totalPages);\r\n        setTotalElements(data.totalElements);\r\n        setCurrentPage(data.number + 1);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    // if (id === \"\" || id === null) return;\r\n    loadData(currentPage);\r\n  }, []);\r\n\r\n  const handleFormSubmit = (data) => {\r\n    if (productTypeId === null) {\r\n      // add\r\n      productTypeService.add(data).then((res) => {\r\n        loadData(currentPage);\r\n        handleModalClose();\r\n      });\r\n    } else {\r\n      // update\r\n      productTypeService.update(productTypeId, data).then((res) => {\r\n        loadData(currentPage);\r\n        handleModalClose();\r\n      });\r\n    }\r\n  };\r\n\r\n  const deleteRow = (e, dataId) => {\r\n    e.preventDefault();\r\n    productTypeService.remove(dataId).then((res) => {\r\n      loadData(currentPage);\r\n    });\r\n  };\r\n\r\n  const changePage = (event) => {\r\n    let targetPage = parseInt(event.target.value);\r\n    if (search) {\r\n      searchData(targetPage);\r\n    } else {\r\n      loadData(targetPage);\r\n    }\r\n\r\n    event.target.name = targetPage;\r\n  };\r\n\r\n  const firstPage = () => {\r\n    let firstPage = 1;\r\n    if (currentPage > firstPage) {\r\n      if (search) {\r\n        searchData(firstPage);\r\n      } else {\r\n        loadData(firstPage);\r\n      }\r\n    }\r\n  };\r\n\r\n  const prevPage = () => {\r\n    let prevPage = 1;\r\n    if (currentPage > prevPage) {\r\n      if (search) {\r\n        searchData(currentPage - prevPage);\r\n      } else {\r\n        loadData(currentPage - prevPage);\r\n      }\r\n    }\r\n  };\r\n\r\n  const lastPage = () => {\r\n    let condition = Math.ceil(totalElements / typesPerPage);\r\n    if (currentPage < condition) {\r\n      if (search) {\r\n        searchData(condition);\r\n      } else {\r\n        loadData(condition);\r\n      }\r\n    }\r\n  };\r\n\r\n  const nextPage = () => {\r\n    if (currentPage < Math.ceil(totalElements / typesPerPage)) {\r\n      if (search) {\r\n        searchData(currentPage + 1);\r\n      } else {\r\n        loadData(currentPage + 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  const searchChange = (event) => {\r\n    const searchText = event.target.value;\r\n    setSearch(searchText);\r\n  };\r\n\r\n  const cancelSearch = () => {\r\n    setSearch(\"\");\r\n    loadData(currentPage);\r\n  };\r\n\r\n  const searchData = (currentPage) => {\r\n    currentPage -= 1;\r\n    axios\r\n      .get(\r\n        \"http://localhost:8080/productTypes/search/\" +\r\n          search +\r\n          \"?page=\" +\r\n          currentPage +\r\n          \"&size=\" +\r\n          typesPerPage\r\n      )\r\n      .then((response) => response.data)\r\n      .then((data) => {\r\n        setProductTypes(data.content);\r\n        setTotalPages(data.totalPages);\r\n        setTotalElements(data.totalElements);\r\n        setCurrentPage(data.number + 1);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"container\">\r\n        <div className=\"container pt-4\">\r\n          <div className=\"row\">\r\n            <div className=\"col-sm-12 col-md-6 col-lg-6\">\r\n              <InputGroup size=\"sm\">\r\n                <FormControl\r\n                  placeholder=\"Search\"\r\n                  name=\"search\"\r\n                  className={\"border-primary bg-light text-dark\"}\r\n                  onChange={searchChange}\r\n                  value={search}\r\n                />\r\n                <InputGroup.Append>\r\n                  <Button\r\n                    size=\"sm\"\r\n                    variant=\"outline-success\"\r\n                    type=\"button\"\r\n                    onClick={searchData}\r\n                  >\r\n                    <i className=\"fas fa-search\"></i>\r\n                  </Button>\r\n                  <Button\r\n                    size=\"sm\"\r\n                    variant=\"outline-danger\"\r\n                    type=\"button\"\r\n                    onClick={cancelSearch}\r\n                  >\r\n                    <i className=\"fas fa-times\"></i>\r\n                  </Button>\r\n                </InputGroup.Append>\r\n              </InputGroup>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"container pt-4\">\r\n          <div className=\"card border-primary bt-primary-5\">\r\n            <div className=\"card-header\">\r\n              <div className=\"row\">\r\n                <div className=\"col\">\r\n                  <h2 className=\"card-title\">Product Type List</h2>\r\n                </div>\r\n                <div className=\"col-auto\">\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-primary\"\r\n                    data-toggle=\"modal\"\r\n                    onClick={() => handleModalShow(null, null)}\r\n                  >\r\n                    <i className=\"fas fa-plus-circle mr-1\"></i>\r\n                    Add\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"card-body\">\r\n              <table className=\"table table-hover table-striped table-bordered text-center\">\r\n                <thead>\r\n                  <tr className=\"table-primary\">\r\n                    <th scope=\"col\">No.</th>\r\n                    <th onClick={sortData} scope=\"col\">\r\n                      Name{\" \"}\r\n                      <div\r\n                        className={\r\n                          sortDir === \"asc\"\r\n                            ? \"arrow arrow-up\"\r\n                            : \"arrow arrow-down\"\r\n                        }\r\n                      ></div>\r\n                    </th>\r\n                    {/* <th scope=\"col\">Description</th> */}\r\n                    <th scope=\"col\"></th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {productTypes.map((productType, idx) => {\r\n                    return (\r\n                      <tr key={productType.id}>\r\n                        <th scope=\"row\">{idx + 1}</th>\r\n                        <td>{productType.name}</td>\r\n                        {/* <td>{productType.description}</td> */}\r\n                        <td>\r\n                          <a\r\n                            href=\"/#\"\r\n                            className=\"mr-2\"\r\n                            onClick={(e) => handleModalShow(e, productType.id)}\r\n                          >\r\n                            <i className=\"fas fa-edit text-success\"></i>\r\n                          </a>\r\n                          <a\r\n                            href=\"/#\"\r\n                            onClick={(e) => deleteRow(e, productType.id)}\r\n                          >\r\n                            <i className=\"fas fa-trash-alt text-danger\"></i>\r\n                          </a>\r\n                        </td>\r\n                      </tr>\r\n                    );\r\n                  })}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n            {productTypes.length > 0 ? (\r\n              <div className=\"card-footer\">\r\n                <div style={{ float: \"left\" }}>\r\n                  Showing Page {currentPage} of {totalPages}\r\n                </div>\r\n                <div style={{ float: \"right\" }}>\r\n                  <InputGroup size=\"sm\">\r\n                    <InputGroup.Prepend>\r\n                      <Button\r\n                        type=\"button\"\r\n                        variant=\"outline-primary\"\r\n                        disabled={currentPage === 1 ? true : false}\r\n                        onClick={firstPage}\r\n                      >\r\n                        <i className=\"fas fa-fast-backward\"></i> First\r\n                      </Button>\r\n                      <Button\r\n                        type=\"button\"\r\n                        variant=\"outline-primary\"\r\n                        disabled={currentPage === 1 ? true : false}\r\n                        onClick={prevPage}\r\n                      >\r\n                        <i className=\"fas fa-step-backward\"></i> Prev\r\n                      </Button>\r\n                    </InputGroup.Prepend>\r\n                    <FormControl\r\n                      className={\"page-num bg-light border-primary\"}\r\n                      name=\"currentPage\"\r\n                      value={currentPage}\r\n                      onChange={changePage}\r\n                    />\r\n                    <InputGroup.Append>\r\n                      <Button\r\n                        type=\"button\"\r\n                        variant=\"outline-primary\"\r\n                        disabled={currentPage === totalPages ? true : false}\r\n                        onClick={nextPage}\r\n                      >\r\n                        <i className=\"fas fa-step-forward\"></i> Next\r\n                      </Button>\r\n                      <Button\r\n                        type=\"button\"\r\n                        variant=\"outline-primary\"\r\n                        disabled={currentPage === totalPages ? true : false}\r\n                        onClick={lastPage}\r\n                      >\r\n                        <i className=\"fas fa-fast-forward\"></i> Last\r\n                      </Button>\r\n                    </InputGroup.Append>\r\n                  </InputGroup>\r\n                </div>\r\n              </div>\r\n            ) : null}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Modal */}\r\n      <Modal\r\n        show={modalShow}\r\n        onHide={handleModalClose}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Product Types</Modal.Title>\r\n        </Modal.Header>\r\n        <form onSubmit={formik.handleSubmit}>\r\n          <Modal.Body>\r\n            <Input\r\n              id=\"txtName\"\r\n              type=\"text\"\r\n              label=\"Name\"\r\n              maxLength=\"100\"\r\n              frmField={formik.getFieldProps(\"name\")}\r\n              err={formik.touched.name && formik.errors.name}\r\n              errMessage={formik.errors.name}\r\n            />\r\n            <Input\r\n              id=\"txtDesc\"\r\n              type=\"text\"\r\n              label=\"Description\"\r\n              maxLength=\"100\"\r\n              frmField={formik.getFieldProps(\"description\")}\r\n            />\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={handleModalClose}>\r\n              Close\r\n            </Button>\r\n            <Button\r\n              variant=\"primary\"\r\n              type=\"submit\"\r\n              disabled={!(formik.isValid && formik.dirty)}\r\n            >\r\n              Save\r\n            </Button>\r\n          </Modal.Footer>\r\n        </form>\r\n      </Modal>\r\n      {/* End modal */}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ProductTypeList;\r\n","E:\\Thuc Tap ISC\\Do-an-thuc-tap\\Unicorn\\restaurant-management\\src\\pages\\PositionList.js",["77","78","79","80","81"],"E:\\Thuc Tap ISC\\Do-an-thuc-tap\\Unicorn\\restaurant-management\\src\\services\\positionService.js",[],"E:\\Thuc Tap ISC\\Do-an-thuc-tap\\Unicorn\\restaurant-management\\src\\pages\\EmployeeList.js",["82","83","84","85","86","87","88","89","90","91"],"E:\\Thuc Tap ISC\\Do-an-thuc-tap\\Unicorn\\restaurant-management\\src\\services\\employeeService.js",[],{"ruleId":"92","severity":1,"message":"93","line":9,"column":8,"nodeType":"94","messageId":"95","endLine":9,"endColumn":9},{"ruleId":"92","severity":1,"message":"96","line":10,"column":8,"nodeType":"94","messageId":"95","endLine":10,"endColumn":14},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"92","severity":1,"message":"101","line":12,"column":24,"nodeType":"94","messageId":"95","endLine":12,"endColumn":39},{"ruleId":"92","severity":1,"message":"102","line":37,"column":10,"nodeType":"94","messageId":"95","endLine":37,"endColumn":12},{"ruleId":"92","severity":1,"message":"103","line":37,"column":14,"nodeType":"94","messageId":"95","endLine":37,"endColumn":19},{"ruleId":"104","severity":1,"message":"105","line":91,"column":6,"nodeType":"106","endLine":91,"endColumn":8,"suggestions":"107"},{"ruleId":"92","severity":1,"message":"108","line":7,"column":10,"nodeType":"94","messageId":"95","endLine":7,"endColumn":15},{"ruleId":"92","severity":1,"message":"101","line":14,"column":24,"nodeType":"94","messageId":"95","endLine":14,"endColumn":39},{"ruleId":"92","severity":1,"message":"102","line":36,"column":10,"nodeType":"94","messageId":"95","endLine":36,"endColumn":12},{"ruleId":"92","severity":1,"message":"103","line":36,"column":14,"nodeType":"94","messageId":"95","endLine":36,"endColumn":19},{"ruleId":"104","severity":1,"message":"105","line":90,"column":6,"nodeType":"106","endLine":90,"endColumn":8,"suggestions":"109"},{"ruleId":"92","severity":1,"message":"108","line":7,"column":10,"nodeType":"94","messageId":"95","endLine":7,"endColumn":15},{"ruleId":"92","severity":1,"message":"110","line":15,"column":28,"nodeType":"94","messageId":"95","endLine":15,"endColumn":47},{"ruleId":"92","severity":1,"message":"111","line":22,"column":10,"nodeType":"94","messageId":"95","endLine":22,"endColumn":18},{"ruleId":"92","severity":1,"message":"112","line":22,"column":20,"nodeType":"94","messageId":"95","endLine":22,"endColumn":31},{"ruleId":"92","severity":1,"message":"113","line":24,"column":10,"nodeType":"94","messageId":"95","endLine":24,"endColumn":14},{"ruleId":"92","severity":1,"message":"114","line":24,"column":16,"nodeType":"94","messageId":"95","endLine":24,"endColumn":23},{"ruleId":"92","severity":1,"message":"102","line":55,"column":10,"nodeType":"94","messageId":"95","endLine":55,"endColumn":12},{"ruleId":"92","severity":1,"message":"103","line":55,"column":14,"nodeType":"94","messageId":"95","endLine":55,"endColumn":19},{"ruleId":"104","severity":1,"message":"105","line":96,"column":6,"nodeType":"106","endLine":96,"endColumn":8,"suggestions":"115"},{"ruleId":"104","severity":1,"message":"105","line":146,"column":6,"nodeType":"106","endLine":146,"endColumn":8,"suggestions":"116"},"no-unused-vars","'$' is defined but never used.","Identifier","unusedVar","'Popper' is defined but never used.","no-native-reassign",["117"],"no-negated-in-lhs",["118"],"'setTypesPerPage' is assigned a value but never used.","'id' is assigned a value but never used.","'setId' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'currentPage' and 'loadData'. Either include them or remove the dependency array.","ArrayExpression",["119"],"'event' is defined but never used.",["120"],"'setEmployeesPerPage' is assigned a value but never used.","'position' is assigned a value but never used.","'setPosition' is assigned a value but never used.","'site' is assigned a value but never used.","'setSite' is assigned a value but never used.",["121"],["122"],"no-global-assign","no-unsafe-negation",{"desc":"123","fix":"124"},{"desc":"123","fix":"125"},{"desc":"123","fix":"126"},{"desc":"123","fix":"127"},"Update the dependencies array to be: [currentPage, loadData]",{"range":"128","text":"129"},{"range":"130","text":"129"},{"range":"131","text":"129"},{"range":"132","text":"129"},[2644,2646],"[currentPage, loadData]",[2580,2582],[3296,3298],[4542,4544]]